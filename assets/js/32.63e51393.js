(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{347:function(a,t,s){"use strict";s.r(t);var r=s(7),e=Object(r.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"异步javascript"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#异步javascript"}},[a._v("#")]),a._v(" 异步JavaScript")]),a._v(" "),t("h2",{attrs:{id:"异步编程概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#异步编程概念"}},[a._v("#")]),a._v(" 异步编程概念")]),a._v(" "),t("h3",{attrs:{id:"阻塞"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#阻塞"}},[a._v("#")]),a._v(" 阻塞")]),a._v(" "),t("p",[a._v("当浏览器里面的一个web应用进行密集运算还没有把控制权返回给浏览器的时候，整个浏览器就像冻僵了一样，这叫做**阻塞；**这时候浏览器无法继续处理用户的输入并执行其他任务，直到web应用交回处理器的控制。")]),a._v(" "),t("h3",{attrs:{id:"线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#线程"}},[a._v("#")]),a._v(" 线程")]),a._v(" "),t("p",[a._v("一个"),t("strong",[a._v("线程")]),a._v("是一个基本的处理过程，程序用它来完成任务。")]),a._v(" "),t("h4",{attrs:{id:"javascript是单线程的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#javascript是单线程的"}},[a._v("#")]),a._v(" JavaScript是单线程的")]),a._v(" "),t("p",[a._v("JavaScript 传统上是单线程的。即使有多个内核，也只能在单一线程上运行多个任务，此线程称为主线程。")]),a._v(" "),t("blockquote",[t("p",[a._v("通过"),t("code",[a._v("Web workers")]),a._v("可以把一些任务交给一个名为worker的单独的线程，这样就可以同时运行多个JavaScript代码块。一般来说，用一个worker来运行一个耗时的任务，主线程就可以处理用户的交互（避免了阻塞),但是"),t("code",[a._v("Web workers")]),a._v("不能访问DOM。")])]),a._v(" "),t("h2",{attrs:{id:"异步javascript-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#异步javascript-2"}},[a._v("#")]),a._v(" 异步JavaScript")]),a._v(" "),t("h3",{attrs:{id:"异步callbacks"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#异步callbacks"}},[a._v("#")]),a._v(" 异步callbacks")]),a._v(" "),t("p",[a._v("异步callbacks 其实就是函数，只不过是作为参数传递给那些在后台执行的其他函数. 当那些后台运行的代码结束，就调用callbacks函数，通知你工作已经完成。")]),a._v(" "),t("h3",{attrs:{id:"promises"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#promises"}},[a._v("#")]),a._v(" Promises")]),a._v(" "),t("h5",{attrs:{id:"事件队列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#事件队列"}},[a._v("#")]),a._v(" 事件队列")]),a._v(" "),t("p",[a._v("异步操作被放入事件队列中，事件队列在主线程完成处理后运行，这样它们就不会阻止后续JavaScript代码的运行。排队操作将尽快完成，然后将结果返回到JavaScript环境。")]),a._v(" "),t("h2",{attrs:{id:"合作异步javascript-超时和间隔"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#合作异步javascript-超时和间隔"}},[a._v("#")]),a._v(" 合作异步JavaScript: 超时和间隔")]),a._v(" "),t("h4",{attrs:{id:"settimeout"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#settimeout"}},[a._v("#")]),a._v(" setTimeout()")]),a._v(" "),t("p",[t("code",[a._v("setTimeout()")]),a._v("在指定的时间后执行一段特定代码。参数如下")]),a._v(" "),t("ul",[t("li",[a._v("要运行的函数，或者函数引用。")]),a._v(" "),t("li",[a._v("表示在执行代码之前等待的时间间隔(以毫秒为单位)的数字。")]),a._v(" "),t("li",[a._v("更多的参数：在指定函数运行时，希望传递给函数的值。")])]),a._v(" "),t("blockquote",[t("p",[a._v("指定的时间（或延迟）不能保证在指定的确切时间之后执行，而是最短的延迟执行时间。在主线程上的堆栈为空之前，传递给这些函数的回调将无法运行。")])]),a._v(" "),t("h5",{attrs:{id:"清楚超时"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#清楚超时"}},[a._v("#")]),a._v(" 清楚超时")]),a._v(" "),t("p",[t("code",[a._v("setTimeout()")]),a._v(" 返回一个标志符变量用来引用这个间隔，可以用"),t("code",[a._v("clearTimeout()")]),a._v("，将"),t("code",[a._v("setTimeout()")]),a._v("调用的标识符作为参数传递给它，从而在超时运行之前取消。")]),a._v(" "),t("h4",{attrs:{id:"setinterval"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#setinterval"}},[a._v("#")]),a._v(" setInterval()")]),a._v(" "),t("p",[a._v("以固定的时间间隔，重复运行一段代码。")]),a._v(" "),t("h5",{attrs:{id:"清除intervals"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#清除intervals"}},[a._v("#")]),a._v(" 清除intervals")]),a._v(" "),t("p",[a._v("将"),t("code",[a._v("setInterval")]),a._v("()调用返回的标识符传递给"),t("code",[a._v("clearInterval")]),a._v("()函数来清除"),t("code",[a._v("intervals")])]),a._v(" "),t("h5",{attrs:{id:"递归的timeouts"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#递归的timeouts"}},[a._v("#")]),a._v(" 递归的timeouts")]),a._v(" "),t("p",[a._v("使用"),t("code",[a._v("setTimeout()")]),a._v("：我们可以递归调用它来重复运行相同的代码")]),a._v(" "),t("h4",{attrs:{id:"requestanimationframe"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#requestanimationframe"}},[a._v("#")]),a._v(" requestAnimationFrame()")]),a._v(" "),t("p",[t("code",[a._v("setInterval()")]),a._v("的现代版本;在浏览器下一次重新绘制显示之前执行指定的代码块，从而允许动画在适当的帧率下运行，而不管它在什么环境中运行。")]),a._v(" "),t("p",[a._v("该方法将重新加载页面之前要调用的回调函数作为参数。")]),a._v(" "),t("h5",{attrs:{id:"包括时间戳"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#包括时间戳"}},[a._v("#")]),a._v(" 包括时间戳")]),a._v(" "),t("p",[a._v("传递给 "),t("code",[a._v("requestAnimationFrame()")]),a._v(" 函数的实际回调也可以被赋予一个参数（一个时间戳值），表示自"),t("code",[a._v("requestAnimationFrame()")]),a._v(" 开始运行以来的时间。")]),a._v(" "),t("h5",{attrs:{id:"撤销requestanimationframe"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#撤销requestanimationframe"}},[a._v("#")]),a._v(" 撤销requestAnimationFrame()")]),a._v(" "),t("p",[t("code",[a._v("cancelAnimationFrame()")]),a._v("方法用来撤销，以"),t("code",[a._v("requestAnimationFrame()")]),a._v("的返回值为参数。")]),a._v(" "),t("h3",{attrs:{id:"优雅的异步处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优雅的异步处理"}},[a._v("#")]),a._v(" 优雅的异步处理")]),a._v(" "),t("h4",{attrs:{id:"什么是promises"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是promises"}},[a._v("#")]),a._v(" 什么是Promises？")]),a._v(" "),t("p",[a._v("Promise 是一个对象，代表操作的中间状态。")]),a._v(" "),t("h4",{attrs:{id:"promises指南"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#promises指南"}},[a._v("#")]),a._v(" Promises指南")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("创建promise时，它既不是成功也不是失败状态。这个状态叫作"),t("strong",[a._v("pending")]),a._v("（待定）。")])]),a._v(" "),t("li",[t("p",[a._v("当promise返回时，称为")]),a._v(" "),t("p",[a._v("resolved")]),a._v(" "),t("p",[a._v("（已解决）.")]),a._v(" "),t("ol",[t("li",[a._v("一个成功"),t("strong",[a._v("resolved")]),a._v("的promise称为"),t("strong",[a._v("fullfilled")]),a._v("（"),t("strong",[a._v("实现")]),a._v("）。它返回一个值，可以通过将"),t("code",[a._v(".then()")]),a._v("块链接到promise链的末尾来访问该值。"),t("code",[a._v(".then()")]),a._v("块中的执行程序函数将包含promise的返回值。")]),a._v(" "),t("li",[a._v("一个不成功"),t("strong",[a._v("resolved")]),a._v("的promise被称为"),t("strong",[a._v("rejected")]),a._v("（"),t("strong",[a._v("拒绝")]),a._v("）了。它返回一个原因（"),t("strong",[a._v("reason")]),a._v("），一条错误消息，说明为什么拒绝promise。可以通过将"),t("code",[a._v(".catch()")]),a._v("块链接到promise链的末尾来访问此原因。")])])])]),a._v(" "),t("h4",{attrs:{id:"自定义promises"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自定义promises"}},[a._v("#")]),a._v(" 自定义Promises")]),a._v(" "),t("h5",{attrs:{id:"使用promise-构造函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用promise-构造函数"}},[a._v("#")]),a._v(" 使用Promise()构造函数")]),a._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" timeoutPromise "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Promise")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("resolve"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" reject")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("setTimeout")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("resolve")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'Success!'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("p",[t("code",[a._v("resolve()")]),a._v("和"),t("code",[a._v("reject()")]),a._v("是用来"),t("strong",[a._v("实现")]),a._v("和"),t("strong",[a._v("拒绝")]),a._v("新创建的promise的函数。")]),a._v(" "),t("h3",{attrs:{id:"async和await"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#async和await"}},[a._v("#")]),a._v(" async和await")]),a._v(" "),t("h4",{attrs:{id:"async-await-基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#async-await-基础"}},[a._v("#")]),a._v(" async/await 基础")]),a._v(" "),t("h5",{attrs:{id:"async关键字"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#async关键字"}},[a._v("#")]),a._v(" async关键字")]),a._v(" "),t("p",[a._v("使用 "),t("code",[a._v("async")]),a._v(" 关键字将一个函数声明为异步函数。异步函数是一个知道怎样使用 "),t("code",[a._v("await")]),a._v(" 关键字调用异步代码的函数。")]),a._v(" "),t("p",[a._v("异步函数保证返回值为promise。")]),a._v(" "),t("h5",{attrs:{id:"await关键字"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#await关键字"}},[a._v("#")]),a._v(" await关键字")]),a._v(" "),t("p",[a._v("它会暂停代码在该行上，直到 promise 完成，然后返回结果值。在暂停的同时，其他正在等待执行的代码就有机会执行了。")]),a._v(" "),t("h4",{attrs:{id:"异常处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#异常处理"}},[a._v("#")]),a._v(" 异常处理")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("try...catch")])]),a._v(" "),t("li",[a._v("将 "),t("code",[a._v(".catch()")]),a._v(" 块链接到 "),t("code",[a._v(".then()")]),a._v(" 调用的末尾")])])])}),[],!1,null,null,null);t.default=e.exports}}]);